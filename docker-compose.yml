version: '3.8'

name: zama-chain

services:

  #kms-core:
  #  image: ghcr.io/zama-ai/kms-dev:v0.3.2
  #  ports:
  #    - "50051:50051"

  fevm-full-node:
    image: ghcr.io/zama-ai/ethermint-dev-node:v0.4.2
    ports:
      - "26656:26656"
      - "26657:26657"
      - "8545:8545"
      - "8546:8546"
    volumes:
      - ./blockchain/scripts/run_developer_image.sh:/start.sh
      - ./blockchain/temp/:/config/res/keys/
    entrypoint: [ "/bin/bash", "/start.sh" ]
    healthcheck:
      test: "curl -f http://localhost:26657/status"
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 20s

  fevm-light-node:
    image: cometbft/cometbft:v0.38.6
    ports:
      - "8880:8888"
    entrypoint: "/bin/bash"
    command: >
      -c "sleep 20 && curl -s http://fevm-full-node:26657/commit | jq -r '.result.signed_header.commit.block_id.hash' && cometbft light ethermint_9000-1 -p http://fevm-full-node:26657 -w http://fevm-full-node:26657 --hash $(curl -s http://fevm-full-node:26657/commit | jq -r '.result.signed_header.commit.block_id.hash') --height $(curl -s http://fevm-full-node:26657/commit | jq -r '.result.signed_header.header.height') --laddr tcp://0.0.0.0:8880 --sequential"
    depends_on:
      - fevm-full-node

  kms-full-node:
    build:
      context: .
      dockerfile: blockchain/contracts/operations/docker/dev.dockerfile
    ports:
      - "36656:26656"
      - "36657:26657"
      - "1317:1317"
      - "9090:9090"
    entrypoint: [ "/app/bootstrap.sh" ]
    healthcheck:
      test: "wget -Sq --spider http://localhost:26657/status"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 10s

  #kms-connector:
  #  build:
  #    context: .
  #    dockerfile: blockchain/connector/operations/docker/local.dockerfile
  #  command:
  #    - "kms-blockchain-connector"
  #  depends_on:
  #    kms-full-node:
  #      condition: service_healthy
  #  environment:
  #    - RUN_MODE=dev
  #    - NO_COLOR=true
  #    - ASC_CONN_TRACING_SERVICE_NAME=kms-connector
  #    - ASC_CONN_TRACING_ENDPOINT=http://otel-collector:4317

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./config/local/otel-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension

