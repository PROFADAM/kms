#!/bin/bash

groupadd docker
usermod -aG docker ec2-user
usermod -aG ne ec2-user

systemctl enable --now docker
echo "Docker installed successfully"

# Install Nitro Enclaves
ALLOCATOR_YAML=/etc/nitro_enclaves/allocator.yaml
MEM_KEY=memory_mib
CPU_KEY=cpu_count
DEFAULT_MEM=8096
DEFAULT_CPU=2

sed -r "s/^(\s*$MEM_KEY\s*:\s*).*/\1$DEFAULT_MEM/" -i "$ALLOCATOR_YAML"
sed -r "s/^(\s*$CPU_KEY\s*:\s*).*/\1$DEFAULT_CPU/" -i "$ALLOCATOR_YAML"

VSOCK_PROXY_YAML=/etc/nitro_enclaves/vsock-proxy.yaml
cat <<'EOF' >$VSOCK_PROXY_YAML
allowlist:
- {address: kms.${region}.amazonaws.com, port: 443}
- {address: kms-fips.${region}.amazonaws.com, port: 443}
- {address: s3.${region}.amazonaws.com, port: 443}
- {address: s3-fips.${region}.amazonaws.com, port: 443}
EOF

systemctl enable --now nitro-enclaves-allocator.service
systemctl enable --now nitro-enclaves-vsock-proxy.service

echo "Nitro Enclaves installed successfully"


# Install ORAS
version="1.1.0"
url="https://github.com/oras-project/oras/releases/download/v$version/oras_"$version"_linux_amd64.tar.gz"
mkdir -p /home/ec2-user/oras-install/
curl -LO $url
tar -zxf oras_*.tar.gz -C /home/ec2-user/oras-install/
sudo cp /home/ec2-user/oras-install/oras /bin/
sudo mv /home/ec2-user/oras-install/oras /usr/local/bin/
rm -rf oras_*.tar.gz /home/ec2-user/oras-install/
echo "ORAS installed successfully"

mkdir -p /home/ec2-user/app
sudo chown -R ec2-user:ec2-user /home/ec2-user/app

sudo usermod -aG ne ec2-user

cd /home/ec2-user
if [[ ! -d ./utils ]]; then
  mkdir -p ./utils

  cd ./utils
  cat <<'EOF' >>pull_docker_image.sh
#!/usr/bin/bash

set -x
set -e

account_id=$( aws sts get-caller-identity | jq -r '.Account' )
token=$(curl --request PUT "http://169.254.169.254/latest/api/token" --header "X-aws-ec2-metadata-token-ttl-seconds: 3600")
region=$(curl -s http://169.254.169.254/latest/meta-data/placement/region --header "X-aws-ec2-metadata-token: $token")
read username password < <(echo $(aws secretsmanager get-secret-value --region $region --secret-id ${secret_key} --query SecretString --output text | jq -r '.username, .password'))
sudo docker login -u $username -p $password https://ghcr.io/zama-ai
sudo docker pull ${image}
oras login -u $username -p $password ghcr.io
oras pull ${image_eif} --output /home/ec2-user/app/

EOF

  chmod +x pull_docker_image.sh
  chown -R ec2-user:ec2-user /home/ec2-user/utils

  sudo -H -u ec2-user bash -c "cd /home/ec2-user/utils && ./pull_docker_image.sh"

  sudo rm -rf /home/ec2-user/utils

fi
echo "Docker image ${image} pulled successfully"

####################################################################
# Create Nitro Enclave Service
cd /home/ec2-user/app
cat <<'EOF' >>run-kms-enclave.sh
#!/usr/bin/bash

set -x
set -e

nitro-cli run-enclave --cpu-count 2 --memory 4096 --eif-path /home/ec2-user/app/kms-enclave.eif --debug-mode --enclave-cid 4

EOF

chmod +x /home/ec2-user/app/run-kms-enclave.sh
echo "Nitro Enclave Script created successfully with ${image_eif}"

if [[ ! -f /etc/systemd/system/kms-enclave-server.service ]]; then

  sudo cat <<'EOF' >>/etc/systemd/system/kms-enclave-server.service
[Unit]
Description=Nitro Enclaves Signing Server
DefaultDependencies=no
Requires=nitro-enclaves-allocator.service nitro-enclaves-vsock-proxy.service
After=nitro-enclaves-allocator.service nitro-enclaves-vsock-proxy.service

[Service]
Type=forking
ExecStart=/home/ec2-user/app/run-kms-enclave.sh
Restart=always
User=ec2-user
Group=ne
TimeoutStartSec=300
EOF

fi
systemctl enable kms-enclave-server.service
systemctl start kms-enclave-server.service
echo "KMS Enclave Server installed successfully"
##################################################################


####################################################################
# Create KMS Proxy Server
cd /home/ec2-user/app
cat <<'EOF' >>run-kms.sh
#!/usr/bin/bash

set -x
set -e

enclave_cid=$(nitro-cli describe-enclaves | jq -r '.[] | select(.State|test("running"; "i")) | .EnclaveCID')

sudo docker run -d --restart unless-stopped --name kms_server -p 50051:50051 ${image} kms-server proxy --enclave-vsock vsock://$enclave_cid:5000

EOF

chmod +x /home/ec2-user/app/run-kms.sh
echo "KMS Server Script created successfully with ${image}"

if [[ ! -f /etc/systemd/system/kms-proxy-server.service ]]; then

  sudo cat <<'EOF' >>/etc/systemd/system/kms-proxy-server.service
[Unit]
Description=KMS Proxy kms-server
After=nitro-enclave-server.service
Requires=kms-enclave-server.service

[Service]
Type=simple
ExecStart=/home/ec2-user/app/run-kms.sh
Restart=on-failure
User=ec2-user
Group=ec2-user
EOF

fi
systemctl enable kms-proxy-server.service
systemctl start kms-proxy-server.service
echo "KMS Proxy Server installed successfully"
##################################################################


####################################################################
# Create Assume role socat Service
cd /home/ec2-user/app
cat <<'EOF' >>run-kms-assume-role.sh
#!/usr/bin/bash

set -x
set -e

socat -u exec:\"aws\ sts\ assume-role\ --role-arn\ ${role_arn}\ --role-session-name\ kms-enclave-4\" vsock-connect:4:4000
EOF

chmod +x /home/ec2-user/app/run-kms-assume-role.sh
echo "KMS Assume Role Script created successfully with ${image}"

if [[ ! -f /etc/systemd/system/kms-assume-role.service ]]; then

  sudo cat <<'EOF' >>/etc/systemd/system/kms-assume-role.service
[Unit]
Description=KMS Assume Role
After=kms-proxy-server.service kms-enclave-server.service
Requires=kms-proxy-server.service kms-enclave-server.service

[Service]
Type=simple
ExecStart=/home/ec2-user/app/run-kms-assume-role.sh
Restart=allways
User=ec2-user
Group=ec2-user

[Install]
WantedBy=multi-user.target
EOF

fi
systemctl enable kms-assume-role.service
systemctl start kms-assume-role.service
echo "KMS Assume Role installed successfully"



