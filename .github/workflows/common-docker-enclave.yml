name: Docker Build and Push Enclave

on:
  workflow_call:
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true
    inputs:
      ref:
        type: string
        required: false
        default: ''
      working-directory:
        type: string
        required: true
      docker-context:
          type: string
          required: false
          default: '.'
      image-name:
        type: string
        required: true
      push_image:
        type: boolean
        default: true
        required: false
      runs_on:
        type: string
        required: false
        default: 'ubuntu-latest'
    outputs:
      image_eif:
        description: "Image Name with Tag generated by this task with EIF"
        value: "${{ jobs.build-and-push-docker.outputs.image_eif }}"
      eif_file_path:
        description: "Eif File Path"
        value: "{{ jobs.build-and-push-docker.outputs.eif_file_path }}"
      eif_info_path:
        description: "Eif Info Path"
        value: "{{ jobs.build-and-push-docker.outputs.eif_info_path }}"
      eif_pcr0:
        description: "Eif Measurements PCR0"
        value: "{{ jobs.build-and-push-docker.outputs.eif_pcr0 }}"

jobs:
  build-and-push-docker:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      image_eif: ${{ steps.push-file.outputs.image-eif }}
      eif_file_path: ${{ steps.eif.outputs.eif_file_path }}
      eif_info_path: ${{ steps.eif.outputs.eif_info_path }}
      eif_pcr0: ${{ steps.eif.outputs.eif_pcr0 }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          platforms: linux/amd64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo github event
        run: echo "Github event ==> ${{ github.event_name }}"

      - name: Current branch sha
        if: github.event_name != 'release'
        run: |
          echo "DOCKER_TAG_IMAGE=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
      - name: Current Tag
        if: github.event_name == 'release'
        run: |
          echo "DOCKER_TAG_IMAGE=${{  github.ref_name }}" >> "$GITHUB_ENV"

      - name: Docker Build and Push
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          context: .
          build-args: |
            BLOCKCHAIN_ACTIONS_TOKEN=${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
          file: ${{ inputs.working-directory}}/operations/docker/enclave.dockerfile
          push: false
          pull: false
          load: true
          tags: ghcr.io/zama-ai/${{ inputs.image-name }}-enclave:${{env.DOCKER_TAG_IMAGE}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get Docker sock path
        if: ${{ inputs.push_image }}
        run: echo "DOCKER_SOCK_PATH=$(docker context inspect | jq -r '.[0].Endpoints.docker.Host' | sed "s^unix://^^")" >> "$GITHUB_ENV"

      - name: Set EIF output dir
        if: ${{ inputs.push_image }}
        run: |
          echo "EIF_OUTPUT_DIR=${{ github.workspace }}/${{ inputs.working-directory }}/eif-output" >> "$GITHUB_ENV"


      - name: Create EIF file
        if: ${{ inputs.push_image }}
        uses: addnab/docker-run-action@4f65fabd2431ebc8d299f8e5a018d79a769ae185 #v3
        with:
          image: amazonlinux@sha256:62ebd855c09b363009221442fcb1d09aca167d4ba58f2cfd14e00e59ca2f2d54
          options: -v ${{ env.EIF_OUTPUT_DIR }}:/output -v ${{env.DOCKER_SOCK_PATH}}:/var/run/docker.sock
          run: |
            dnf install aws-nitro-enclaves-cli aws-nitro-enclaves-cli-devel -y

            nitro-cli build-enclave --docker-uri ghcr.io/zama-ai/${{ inputs.image-name }}-enclave:${{env.DOCKER_TAG_IMAGE}} --output-file /output/enclave.eif

            nitro-cli describe-eif --eif-path /output/enclave.eif > /output/eif-info.txt

      - name: Write Eif file and path
        if: ${{ inputs.push_image }}
        id: eif
        run: |
          echo "eif_file_path=${{ env.EIF_OUTPUT_DIR }}/enclave.eif" >> "$GITHUB_OUTPUT"
          echo "eif_info_path=${{ env.EIF_OUTPUT_DIR }}/eif-info.txt" >> "$GITHUB_OUTPUT"
          EIF_MEASUREMENT_PCR0=$(jq '.Measurements.PCR0' ${{ env.EIF_OUTPUT_DIR }}/eif-info.txt)
          echo "eif_pcr0=${EIF_MEASUREMENT_PCR0}" >> "$GITHUB_OUTPUT"

      - name: Setup oras
        if: ${{ inputs.push_image }}
        uses: oras-project/setup-oras@ca28077386065e263c03428f4ae0c09024817c93 # v1.2.0
        with:
          version: 1.1.0

      - name: Install Cosign
        if: ${{ inputs.push_image }}
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382 # v3.6.0

      - name: Push Enclave file to ghcr.io
        if: ${{ inputs.push_image }}
        id: push-file
        shell: bash
        env:
          EIF_FILE_PATH: ${{ steps.eif.outputs.eif_file_path }}
          EIF_INFO_PATH: ${{ steps.eif.outputs.eif_info_path }}
        run: |
          WORKDIR="${{ github.workspace }}/${{ inputs.working-directory}}/artifact-push/"

          mkdir ${WORKDIR}
          cd ${WORKDIR}

          cp "${{ env.EIF_OUTPUT_DIR }}/enclave.eif" "${WORKDIR}/${{ inputs.image-name }}-enclave.eif"
          cp "${{ env.EIF_OUTPUT_DIR }}/eif-info.txt" "${WORKDIR}/${{ inputs.image-name }}-eif-info.txt"

          mkdir tmp/

          oras push \
            --export-manifest tmp/manifest.json \
            "ghcr.io/zama-ai/${{ inputs.image-name }}-enclave:${{env.DOCKER_TAG_IMAGE}}" \
            "${{ inputs.image-name }}-enclave.eif" \
            "${{ inputs.image-name }}-eif-info.txt"

          DIGEST=$(sha256sum tmp/manifest.json | cut -d " " -f 1)

          echo "digest=${DIGEST}" >> "${GITHUB_OUTPUT}"
          echo "image-eif=ghcr.io/zama-ai/${{ inputs.image-name }}-enclave:${{env.DOCKER_TAG_IMAGE}}@sha256:${DIGEST}" >> "${GITHUB_OUTPUT}"

      - name: Sign artifact
        if: ${{ inputs.push_image }}
        id: sign-artifact
        shell: bash
        env:
          ARTIFACT_PATH: ${{ steps.push-file.outputs.image-eif }}
        run: |
          RESPONSE=$(cosign sign --yes "${ARTIFACT_PATH}" 2>&1)
          echo "${RESPONSE}"
          LOG_INDEX=$(echo "${RESPONSE}" | grep "tlog entry created with index: " | cut -d ":" -f 2 | tr -d " ")
          echo "log_index=${LOG_INDEX}" >> "${GITHUB_OUTPUT}"
