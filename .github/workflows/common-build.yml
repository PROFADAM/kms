name: Compile Rust Project and Run Tests

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        required: true
      build-publish-docs:
        type: boolean
        required: false
        default: false
      runs-on:
        type: string
        required: false
        default: 'ubuntu-latest'
      args-tests:
        type: string
        required: false
        default: ''
      args-tests-fhe:
        type: string
        required: false
        default: '-F tfhe/seeder_unix -F tfhe/x86_64'
      run-redis:
        type: boolean
        required: false
        default: false
      run-wasm:
        type: boolean
        required: false
        default: false
      wasm-test-feature:
        type: string
        required: false
        default: '-F wasm_tests'
      package-name:
        type: string
        required: true
      test-coverage:
        type: boolean
        required: false
        default: false
      test-minimum-coverage:
        type: string
        required: false
        default: 0
      npm-release:
        type: boolean
        required: false
        default: false
      npm-release-dry-run:
        type: boolean
        required: false
        default: false
      npm-release-tag-latest:
        type: boolean
        required: false
        default: false
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true
      NPM_TOKEN:
        required: false

env:
  CARGO_TERM_COLOR: always
  DOCKER_BUILD_TEST_SIMULATOR: 1
  NPM_TAG: ""

jobs:
  compile-rust-unit-tests:
    runs-on: ${{ inputs.runs-on }}
    services:
      redis:
        image: ${{ inputs.run-redis && 'redis/redis-stack:latest' || '' }}
        ports:
          - 6379:6379
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      # Needed to be able to pull some docker images for the simulator test
      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{ inputs.package-name == 'simulator' }}
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Setup Home
        if: ${{ inputs.runs-on != 'ubuntu-latest' }}
        run: echo "HOME=/home/ubuntu" >> "${GITHUB_ENV}"

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: stable
          components: rustfmt, clippy, llvm-tools-preview

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3.0.0
        with:
          version: "26.x"

      - name: Setup usage of private repo
        run: git config --global url."https://${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}@github.com".insteadOf ssh://git@github.com

      - name: Formatting
        run: cargo fmt --all -- --check

      - name: Linting
        run: RUSTFLAGS="-Aclippy::doc-lazy-continuation" cargo clippy --all-targets --all-features --package ${{inputs.package-name}} -- -D warnings

      - name: Run Tests
        if: ${{ ! inputs.test-coverage }}
        run: cargo test ${{ inputs.args-tests }} ${{ inputs.args-tests-fhe }} --release

      - name: Run Tests with Coverage
        if: ${{ inputs.test-coverage }}
        run: |
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS='-Cinstrument-coverage'
          export LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw'
          cargo test ${{ inputs.args-tests }} ${{ inputs.args-tests-fhe }}
          cargo install grcov
          mkdir coverage
          ~/.cargo/bin/grcov . --binary-path ../../target/debug/deps/ -s . --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage/ -t markdown
          ~/.cargo/bin/grcov . --binary-path ../../target/debug/deps/ -s . --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage/ -t lcov
          find coverage
          cat coverage/markdown.md
          cat coverage/markdown.md >> "$GITHUB_STEP_SUMMARY"

      - name: Report code coverage
        if: ${{ inputs.test-coverage }}
        uses: romeovs/lcov-reporter-action@87a815f34ec27a5826abba44ce09bbc688da58fd # v0.4.0
        with:
          lcov-file: lcov
          working-directory: ${{ inputs.working-directory }}/coverage

      - name: Check minimum coverage
        if: ${{ inputs.test-coverage }}
        uses: VeryGoodOpenSource/very_good_coverage@3b475421464c564c0714d92ce02742bd81fa9eda # v2.2.0
        with:
          path: '${{inputs.working-directory}}/coverage/lcov'
          min_coverage: ${{ inputs.test-minimum-coverage }}

      - name: Build Documentation
        if: ${{ inputs.build-publish-docs }}
        run: cargo doc --no-deps

      - name: Deploy to GitHub Pages
        if: ${{ inputs.build-publish-docs }}
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: ${{ inputs.working-directory }}

      - name: Install
        if: ${{ inputs.run-wasm }}
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasm with tests
        if: ${{ inputs.run-wasm }}
        run: wasm-pack build --target nodejs . --no-default-features ${{ inputs.wasm-test-feature }}

      - name: Install node
        if: ${{ inputs.run-wasm }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: 20

      - name: Generate wasm test files
        if: ${{ inputs.run-wasm }}
        run: |
          cargo test test_reencryption_threshold_and_write_transcript -F tfhe/seeder_unix -F tfhe/x86_64 ${{ inputs.wasm-test-feature }} --release
          cargo test test_reencryption_centralized_and_write_transcript -F tfhe/seeder_unix -F tfhe/x86_64 ${{ inputs.wasm-test-feature }} --release

      - name: Test wasm
        if: ${{ inputs.run-wasm }}
        run: node --test tests/js

      - name: Set NPM version tag to latest
        if: ${{ inputs.npm-release-tag-latest }}
        run: |
          echo "NPM_TAG=latest" >> "${GITHUB_ENV}"

      - name: Set NPM version tag to prerelease
        if: ${{ ! inputs.npm-release-tag-latest }}
        run: |
          echo "NPM_TAG=prerelease" >> "${GITHUB_ENV}"

      - name: NPM build node package
        if: ${{ inputs.npm-release || inputs.npm-release-dry-run }}
        working-directory: ./core/service
        run: |
          rm -rf pkg
          wasm-pack build --target nodejs . --no-default-features
          sed -i 's/"kms"/"node-tkms"/g' pkg/package.json
          echo "# node-tkms" > pkg/README.md

      - name: NPM publish Node package dry-run
        if: ${{ inputs.npm-release || inputs.npm-release-dry-run }}
        uses: JS-DevTools/npm-publish@19c28f1ef146469e409470805ea4279d47c3d35c # v3.1.1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./core/service/pkg/package.json
          dry-run: true
          provenance: false # change to true when repo is public (see #1048)
          tag: ${{ env.NPM_TAG }}

      - name: NPM publish Node package
        if: ${{ inputs.npm-release }}
        uses: JS-DevTools/npm-publish@19c28f1ef146469e409470805ea4279d47c3d35c # v3.1.1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./core/service/pkg/package.json
          dry-run: false
          provenance: false # change to true when repo is public (see #1048)
          tag: ${{ env.NPM_TAG }}

      - name: NPM build web package
        if: ${{ inputs.npm-release || inputs.npm-release-dry-run }}
        working-directory: ./core/service
        run: |
          rm -rf pkg
          wasm-pack build --target web . --no-default-features
          sed -i 's/"kms"/"tkms"/g' pkg/package.json
          echo "# tkms" > pkg/README.md

      - name: NPM publish web package dry-run
        if: ${{ inputs.npm-release || inputs.npm-release-dry-run }}
        uses: JS-DevTools/npm-publish@19c28f1ef146469e409470805ea4279d47c3d35c # v3.1.1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./core/service/pkg/package.json
          dry-run: true
          provenance: false # change to true when repo is public (see #1048)
          tag: ${{ env.NPM_TAG }}

      - name: NPM publish web package
        if: ${{ inputs.npm-release }}
        uses: JS-DevTools/npm-publish@19c28f1ef146469e409470805ea4279d47c3d35c # v3.1.1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./core/service/pkg/package.json
          dry-run: false
          provenance: false # change to true when repo is public (see #1048)
          tag: ${{ env.NPM_TAG }}
