name: Compile Rust Project and Run Tests

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        required: true
        default: './'
      build-publish-docs:
        type: boolean
        required: false
        default: false
      runs-on:
        type: string
        required: false
        default: 'ubuntu-latest'
      args-tests:
        type: string
        required: false
        default: ''
      args-tests-fhe:
        type: string
        required: false
        default: '-F tfhe/seeder_unix -F tfhe/x86_64'
      run-redis:
        type: boolean
        required: false
        default: false
      run-wasm:
        type: boolean
        required: false
        default: false
      wasm-test-feature:
        type: string
        required: false
        default: '-F wasm_tests'
      package-name:
        type: string
        required: true
        default: ''
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  compile-rust-unit-tests:
    runs-on: ${{ inputs.runs-on }}
    services:
      redis:
        image: ${{ inputs.run-redis && 'redis/redis-stack:latest' ||Â '' }}
        ports:
          - 6379:6379
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Setup Home
        if: ${{ inputs.runs-on != 'ubuntu-latest' }}
        run: echo "HOME=/home/ubuntu" >> ${GITHUB_ENV}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "26.x"

      - name: Setup usage of private repo
        run: git config --global url."https://${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}@github.com".insteadOf ssh://git@github.com

      - name: Formatting
        run: cargo fmt --all -- --check

      - name: Linting
        run: cargo clippy --all-targets --all-features --package ${{inputs.package-name}} -- -D warnings

      - name: Run Tests
        run: cargo test ${{ inputs.args-tests }} ${{ inputs.args-tests-fhe }} --release

      - name: Build Documentation
        if: ${{ inputs.build-publish-docs }}
        run: cargo doc --no-deps

      - name: Deploy to GitHub Pages
        if: ${{ inputs.build-publish-docs }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: ${{ inputs.working-directory }}

      - name: Install
        if: ${{ inputs.run-wasm }}
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasm with tests
        if: ${{ inputs.run-wasm }}
        run: wasm-pack build --target nodejs . --no-default-features ${{ inputs.wasm-test-feature }}

      - name: Install node
        if: ${{ inputs.run-wasm }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate wasm test files
        if: ${{ inputs.run-wasm }}
        run: |
          cargo test test_reencryption_threshold_and_write_transcript ${{ inputs.args_build }} -F tfhe/seeder_unix -F tfhe/x86_64 ${{ inputs.wasm-test-feature }} --release
          cargo test test_reencryption_centralized_and_write_transcript ${{ inputs.args_build }} -F tfhe/seeder_unix -F tfhe/x86_64 ${{ inputs.wasm-test-feature }} --release

      - name: Test wasm
        if: ${{ inputs.run-wasm }}
        run: node --test tests/js
