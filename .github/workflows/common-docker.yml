name: Docker Build and Push

on:
  workflow_call:
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true
    inputs:
      working-directory:
        type: string
        required: true
        default: './'
      push_image:
        type: boolean
        default: true
        required: false
      runs_on:
        type: string
        required: false
        default: 'ubuntu-latest'
      with_enclave:
        type: boolean
        default: false
        required: false
    outputs:
      image_name:
        description: "Image Name with Tag generated by this task"
        value: "${{ jobs.build-and-push-docker.outputs.image_name }}"
      image_eif:
        description: "Image Name with Tag generated by this task with EIF"
        value: "${{ jobs.build-and-push-docker.outputs.image_eif }}"
      eif_file_path:
        description: "Eif File Path"
        value: "{{ jobs.build-and-push-docker.outputs.eif_file_path }}"
      eif_info_path:
        description: "Eif Info Path"
        value: "{{ jobs.build-and-push-docker.outputs.eif_info_path }}"
      eif_pcr0:
        description: "Eif Measurements PCR0"
        value: "{{ jobs.build-and-push-docker.outputs.eif_pcr0 }}"

jobs:
  build-and-push-docker:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      image_name: ${{ steps.export-image.outputs.image }}
      image_eif: ${{ steps.push-file.outputs.image-eif }}
      eif_file_path: ${{ steps.eif.outputs.eif_file_path }}
      eif_info_path: ${{ steps.eif.outputs.eif_info_path }}
      eif_pcr0: ${{ steps.eif.outputs.eif_pcr0 }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo github event
        run: echo "Github event ==> ${{ github.event_name }}"

      - name: Current branch sha
        if: github.event_name != 'release'
        run: |
          echo "DOCKER_TAG_IMAGE=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      - name: Current Tag
        if: github.event_name == 'release'
        run: |
          echo "DOCKER_TAG_IMAGE=${{  github.ref_name }}" >> $GITHUB_ENV

      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.working-directory }}
          build-args: |
            BLOCKCHAIN_ACTIONS_TOKEN=${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
          file: ${{ inputs.working-directory}}/operations/docker/ci.dockerfile
          push: ${{ inputs.push_image }}
          pull: false
          tags: ghcr.io/zama-ai/kms:${{env.DOCKER_TAG_IMAGE}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract Docker metadata
        if: github.event_name == 'release'
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          annotations: |
            org.opencontainers.image.description="KMS Centralized Dev Docker Image ${{ env.DOCKER_TAG_IMAGE }}"
          labels: |
            zama.kms.version=${{ env.DOCKER_TAG_IMAGE }}
            zama.kms.description="KMS Image"
          images: ghcr.io/kms-dev:${{ env.DOCKER_TAG_IMAGE }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index

      - name: Docker Build and Push Dev Image
        if: github.event_name == 'release'
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.working-directory }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BLOCKCHAIN_ACTIONS_TOKEN=${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
          file: ${{ inputs.working-directory}}/operations/docker/dev.dockerfile
          push: ${{ inputs.push_image }}
          pull: false
          tags: ghcr.io/zama-ai/kms-dev:${{env.DOCKER_TAG_IMAGE}},ghcr.io/zama-ai/kms-dev:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
      - name: Export image name
        id: export-image
        run: echo "image=ghcr.io/zama-ai/kms:${{env.DOCKER_TAG_IMAGE}}" >> "${GITHUB_OUTPUT}"


