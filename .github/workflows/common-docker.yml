name: Docker Build and Push with Multiarch Manifest

on:
  workflow_call:
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true
      GRAVITON_BUILDER_SSH_PRIVATE_KEY:
        required: true
    inputs:
      ref:
        type: string
        required: false
        default: ''
      working-directory:
        type: string
        required: true
      docker-context:
        type: string
        required: false
        default: '.'
      image-name:
        type: string
        required: true
      push_image:
        type: boolean
        default: true
        required: false
      runs-on-amd:
        type: string
        required: false
        default: 'ubuntu-latest'
      runs-on-arm:
        type: string
        required: false
        default: 'large_ubuntu_16_arm'
      docker-file:
        type: string
        default: 'ci.dockerfile'
        required: false
      graviton-build-host:
        type: string
        required: false
        default: 'ec2-15-188-101-126.eu-west-3.compute.amazonaws.com'
      cache-from:
        type: string
        required: false
        default: 'type=gha'
      cache-to:
        type: string
        required: false
        default: 'type=gha,mode=max'
    outputs:
      image_name:
        description: "Image Name with Tag generated by this task"
        value: "${{ jobs.create-manifest.outputs.image_name }}"
      image_tag:
        description: "Docker Tag generated by this task"
        value: "${{ jobs.determine-tag.outputs.docker_tag }}"

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set Docker Tag
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "tag=nightly-$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_OUTPUT"
          else
            echo "tag=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_OUTPUT"
          fi

  build-and-push-docker:
    needs: determine-tag
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runs-on: ${{ inputs.runs-on-amd }}
            platform-tag: amd64
          - platform: linux/arm64
            runs-on: ${{ inputs.runs-on-arm }}
            platform-tag: arm64
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build and Push with Platform Tag
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          context: ${{ inputs.docker-context }}
          platforms: ${{ matrix.platform }}
          secrets: BLOCKCHAIN_ACTIONS_TOKEN=${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
          file: ./docker/${{ inputs.working-directory }}/${{ inputs.docker-file }}
          push: ${{ inputs.push_image }}
          pull: false
          provenance: false
          sbom: false
          tags: |
            ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }}-${{ matrix.platform-tag }}
          cache-from: ${{ inputs.cache-from }}
          cache-to: ${{ inputs.cache-to }}

  create-manifest:
    needs: [determine-tag, build-and-push-docker]
    runs-on: ${{ inputs.runs-on-amd }}
    outputs:
      image_name: ${{ steps.export-image.outputs.image }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Multiarch Manifest
        run: |
          docker manifest create \
            ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }} \
            --amend ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }}-amd64 \
            --amend ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }}-arm64

          docker manifest create \
            ghcr.io/zama-ai/${{ inputs.image-name }}:latest \
            --amend ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }}-amd64 \
            --amend ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }}-arm64

          docker manifest push ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }}
          docker manifest push ghcr.io/zama-ai/${{ inputs.image-name }}:latest

      - name: Export image name
        id: export-image
        run: echo "image=ghcr.io/zama-ai/${{inputs.image-name}}:${{ needs.determine-tag.outputs.docker_tag }}" >> "${GITHUB_OUTPUT}"