syntax = "proto3";
package kms;

import "base.proto";

service CoreServiceEndpoint {
  // Perform the threshold KMS initialization.
  // This call returns an error on the centralized KMS.
  rpc Init(InitRequest) returns (Empty);

  // Start generating preprocessing materials for key generation asynchronously.
  // This call returns an error on the centralized KMS.
  rpc KeyGenPreproc(KeyGenPreprocRequest) returns (Empty);

  // This call returns an error on the centralized KMS.
  rpc GetPreprocStatus(RequestId) returns (KeyGenPreprocStatus);

  // Generate new keys asynchronously.
  rpc KeyGen(KeyGenRequest) returns (Empty);

  // Return a URI where they can be accessed.
  // The keys at the URI contains signature and authentication information.
  // NOTE: Unprivileged and insecure call
  rpc GetKeyGenResult(RequestId) returns (KeyGenResult);

  // Decrypt a ciphertext and return the signed plaintext.
  rpc Decrypt(DecryptionRequest) returns (Empty);

  // Get the decryption result.
  // This query fails if the result is not available yet.
  rpc GetDecryptResult(RequestId) returns (DecryptionResponse);

  // Reencrypt a ciphertext under a user-specified key and return a signcrypted
  // share of the dercrypted plaintext.
  rpc Reencrypt(ReencryptionRequest) returns (Empty);

  // Get the reencryption result.
  // This query fails if the result is not available yet.
  rpc GetReencryptResult(RequestId) returns (ReencryptionResponse);

  // Start the CRS generatioin protocol asynchronously.
  rpc CrsGen(CrsGenRequest) returns (Empty);

  // Get a reference to the CRS.
  // This query fails if the result is not available yet.
  rpc GetCrsGenResult(RequestId) returns (CrsGenResult);

  // Start a zero-knowledge proof verification
  // on a ProvenCompactCiphertextList.
  rpc VerifyProvenCt(VerifyProvenCtRequest) returns (Empty);

  // Get the zero-knowledge verification result.
  rpc GetVerifyProvenCtResult(RequestId) returns (VerifyProvenCtResponse);
}
