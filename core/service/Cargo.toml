[package]
name = "kms"
version = "0.9.0-rc4"
edition.workspace = true
publish.workspace = true
authors.workspace = true
license.workspace = true

[lib] # Central KMS
name = "kms_lib"
path = "src/lib.rs"
crate-type = ["lib", "cdylib"]

[[bin]] # Bin to generate keys
name = "kms-gen-keys"
path = "src/bin/kms-gen-keys.rs"
required-features = ["testing"]

[[bin]] # Bin to generate TLS certificates for the service
name = "kms-gen-tls-certs"
path = "src/bin/kms-gen-tls-certs.rs"

[[bin]] # Bin to run the gRPC server
name = "kms-server"
path = "src/bin/kms-server.rs"

[[bin]] # Bin to initialize the threshold KMS cluster after all nodes are up and running.
name = "kms-init"
path = "src/bin/kms-init.rs"

[[bin]] # An example client binary
name = "kms-example-client"
path = "src/bin/kms-example-client.rs"
required-features = ["testing"]

[dependencies]
aes = "0.8.4"
aes-gcm-siv = "0.11.1"
aes-prng = "0.2.1"

# Alloy packages are based on alloy 0.8.3
alloy-dyn-abi = { version = "0.8.3", optional = true }
alloy-primitives = { version = "0.8.3", features = ["k256"] }
alloy-sol-types = { version = "0.8.3", features = ["eip712-serde"] }
alloy-signer = "0.3.6"
alloy-signer-local = "0.3.6"

anyhow.workspace = true
aws-config = { version = "1.5.4", optional = true }
aws-nitro-enclaves-nsm-api = { version = "0.4.0", optional = true }
aws-sdk-kms = { version = "1.34.0", optional = true }
aws-sdk-s3 = { version = "1.39.0", optional = true }
kms-core-common = { path = "../common", version = "0.9.0-rc4" }
backoff = { version = "0.4.0", features = ["tokio"], optional = true }
bincode.workspace = true
cbc = { version = "0.1.2", features = ["alloc"] }
cfg-if = "1.0.0"
clap = { workspace = true, features = ["derive"] }
cms = "0.2.3"
conf-trace = { path = "../../conf-trace", optional = true, version = "0.9.0-rc4" }
crypto_box = { version = "0.9.1", features = ["salsa20"] }
der = "0.7.8"
distributed-decryption = { path = "../threshold/", default-features = false, version = "0.9.0-rc4" }
hex = "0.4.3"
itertools = "0.13"
k256 = "0.13.3"
lazy_static = "1.4.0"
nom = "7.1.3"
prost.workspace = true
rand = { workspace = true, features = ["std", "std_rng"] }
rayon = "1.10"
rcgen = { version = "0.13", optional = true }
rsa = { version = "0.9.6", features = ["sha2"] }
serde = { workspace = true, features = ["derive", "rc"] }
serde_bytes = "0.11"
serde_json.workspace = true
serial_test = "3.0.0"
sha3 = "0.10.8"
signature = "2.2.0"
strum = "0.26"
strum_macros = "0.26"
tfhe = { git = "https://github.com/zama-ai/tfhe-rs.git", tag = "tfhe-rs-0.8.0-alpha.9", features = [
    "boolean",
    "shortint",
    "integer",
    "zk-pok",
] }
tfhe-zk-pok = { git = "https://github.com/zama-ai/tfhe-rs.git", tag = "tfhe-rs-0.8.0-alpha.9", optional = true }
tokio = { workspace = true, features = [
    "macros",
    "rt-multi-thread",
], optional = true }
tonic = { workspace = true, optional = true }
tonic-health = { version = "0.11", optional = true }
tower = { version = "0.4", features = ["retry", "timeout"], optional = true }
tower-http = { version = "0.4", features = ["trace"], optional = true }
tracing = { workspace = true, features = ["log"] }
url = "2.5.0"

# [target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = { version = "0.1.7" }
futures = "0.3.30"
serde-wasm-bindgen = { version = "0.6.0" }
wasm-bindgen = { version = "0.2.86", features = ["serde-serialize"] }
tfhe-versionable = { git = "https://github.com/zama-ai/tfhe-rs.git", tag = "tfhe-rs-0.8.0-alpha.9" }

[target.'cfg(unix)'.dependencies]
tfhe = { git = "https://github.com/zama-ai/tfhe-rs.git", tag = "tfhe-rs-0.8.0-alpha.9", features = [
    "seeder_unix",
] }

[dev-dependencies]
assert_cmd = "2.0.14"
sysinfo = "0.31.4"
tempfile = "3.10.1"
tracing-test = "0.2.4"
webpki = { version = "0.22", features = ["std"] }
rustls = { version = "0.23", default-features = false, features = ["std"] }
rstest = "0.21.0"
# The testing feature is only required for tests
distributed-decryption = { path = "../threshold/", default-features = false, version = "0.9.0-rc4", features = ["testing"] }
kms-core-common = { path = "../common", version = "0.9.0-rc4", features = ["testing"] }
kms-core-backward-compatibility = { path = "../backward-compatibility", version = "0.9.0-rc3" , features = ["load", "tests"] }

[build-dependencies]
tonic-build.workspace = true

[features]
default = ["non-wasm", "grpc-client"]
testing = []
non-wasm = [
    "distributed-decryption/non-wasm",
    # TODO we need a way to move "distributed-decryption/testing" to dev-dependencies
    "distributed-decryption/testing",
    "dep:alloy-dyn-abi",
    "dep:aws-config",
    "dep:aws-nitro-enclaves-nsm-api",
    "dep:aws-sdk-kms",
    "dep:aws-sdk-s3",
    "dep:backoff",
    "dep:conf-trace",
    "dep:tokio",
    "dep:rcgen",
    "dep:tonic",
    "dep:tonic-health",
    "dep:tfhe-zk-pok",
    "dep:tower",
    "dep:tower-http",
]
slow_tests = ["testing"]
sequential_sns = ["distributed-decryption/sequential_sns"]
wasm_tests = ["testing"]
grpc-client = ["dep:tonic", "dep:tonic-health", "dep:tokio"]
s3_tests = ["testing"]
insecure = []
