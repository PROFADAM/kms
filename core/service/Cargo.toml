[package]
name = "kms"
version.workspace = true
edition.workspace = true
publish.workspace = true
authors.workspace = true
license.workspace = true

[lib] # Central KMS
name = "kms_lib"
path = "src/lib.rs"
crate-type = ["lib", "cdylib"]

[[bin]] # Bin to generate keys
name = "kms-gen-keys"
path = "src/bin/kms-gen-keys.rs"
required-features = ["testing"]

[[bin]] # Bin to generate TLS certificates for the service
name = "kms-gen-tls-certs"
path = "src/bin/kms-gen-tls-certs.rs"

[[bin]] # Bin to run the gRPC server
name = "kms-server"
path = "src/bin/kms-server.rs"

[[bin]] # Bin to initialize the threshold KMS cluster after all nodes are up and running.
name = "kms-init"
path = "src/bin/kms-init.rs"

[[bin]] # An example client binary
name = "kms-example-client"
path = "src/bin/kms-example-client.rs"
required-features = ["testing"]

[dependencies]
aes.workspace = true
aes-gcm-siv = "=0.11.1"
aes-prng.workspace = true
alloy-dyn-abi = { workspace = true, optional = true }
alloy-primitives = { workspace = true, features = ["k256"] }
alloy-sol-types = { workspace = true, features = ["eip712-serde"] }
alloy-signer.workspace = true
alloy-signer-local.workspace = true
anyhow.workspace = true
aws-config = { version = "=1.5.9", optional = true }
aws-nitro-enclaves-nsm-api = { version = "=0.4.0", optional = true }
aws-sdk-kms = { version = "=1.50.0", optional = true }
aws-sdk-s3 = { version = "=1.62.0", optional = true }
aws-smithy-runtime = { version = "=1.7.3", features = ["client", "connector-hyper-0-14-x"], optional = true }
aws-smithy-runtime-api = { version = "=1.7.3", optional = true }
aws-smithy-types = { version = "=1.2.9", optional = true }
kms-common.workspace = true
backoff = { workspace = true, features = ["tokio"], optional = true }
bincode.workspace = true
ahash = "=0.8.11"
cbc = { version = "=0.1.2", features = ["alloc"] }
cfg-if.workspace = true
clap = { workspace = true, features = ["derive"] }
conf-trace = { workspace = true, optional = true }
crypto_box = { version = "=0.9.1", features = ["salsa20"] }
distributed-decryption = { workspace = true, default-features = false }
hex.workspace = true
http = "=0.2.12"
hyper-rustls = { version = "=0.24.2", optional = true }
itertools.workspace = true
k256.workspace = true
lazy_static.workspace = true
nom = "=7.1.3"
prost.workspace = true
rand = { workspace = true, features = ["std", "std_rng"] }
rasn = "=0.20.2"
rasn-cms = "=0.20.2"
rayon.workspace = true
rcgen = { version = "=0.13.1", optional = true }
rsa = { version = "=0.9.6", features = ["sha2"] }
serde = { workspace = true, features = ["derive", "rc"] }
serde_bytes = "=0.11.15"
serde_json.workspace = true
serial_test = "=3.1.1"
sha3.workspace = true
signature = "=2.2.0"
strum.workspace = true
strum_macros.workspace = true
# experimental-force_fft_algo_dif4 feature ensure PBS is deterministic
tfhe = { workspace = true, features = [
    "boolean",
    "shortint",
    "integer",
    "zk-pok",
    "experimental-force_fft_algo_dif4",
] }
tfhe-zk-pok = { workspace = true, optional = true }
tokio = { workspace = true, features = [
    "macros",
    "rt-multi-thread",
], optional = true }
tokio-util = { version = "=0.7.13", features = ["rt"]}
tonic = { workspace = true, optional = true }
tonic-health = { workspace = true, optional = true }
tower = { workspace = true, features = ["retry", "timeout"], optional = true }
tower-http = { workspace = true, features = ["trace"], optional = true }
tracing = { workspace = true, features = ["log"] }
url = { version = "=2.5.4", features = ["serde"] }
futures-util = "=0.3.31"
ordermap = "=0.5.3"

# [target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = { version = "=0.1.7" }
serde-wasm-bindgen = { version = "=0.6.5" }
wasm-bindgen = { version = "=0.2.95", features = ["serde-serialize"] }
tfhe-versionable.workspace = true
async_cell = "0.2.2"

[target.'cfg(unix)'.dependencies]
tfhe = { workspace = true, features = ["seeder_unix"] }

[dev-dependencies]
assert_cmd = "=2.0.16"
sysinfo = "=0.32.1"
tempfile = "=3.13.0"
tracing-test = "=0.2.5"
webpki = { version = "=0.22.4", features = ["std"] }
rustls = { version = "=0.23.18", default-features = false, features = ["std"] }
rstest = "=0.23.0"
# The testing feature is only required for tests
distributed-decryption = { workspace = true, default-features = false, features = [
    "testing",
] }
kms-common = { workspace = true, features = [
    "testing",
] }
backward-compatibility = { workspace = true, features = [
    "load",
    "tests",
] }
test-utils = { path = "../../test-utils" }

[build-dependencies]
tonic-build.workspace = true

[features]
default = ["non-wasm", "grpc-client"]
testing = []
non-wasm = [
    "distributed-decryption/non-wasm",
    # TODO we need a way to move "distributed-decryption/testing" to dev-dependencies
    "distributed-decryption/testing",
    "dep:alloy-dyn-abi",
    "dep:aws-config",
    "dep:aws-nitro-enclaves-nsm-api",
    "dep:aws-sdk-kms",
    "dep:aws-sdk-s3",
    "dep:aws-smithy-runtime",
    "dep:aws-smithy-runtime-api",
    "dep:aws-smithy-types",
    "dep:hyper-rustls",
    "dep:backoff",
    "dep:conf-trace",
    "dep:tokio",
    "dep:rcgen",
    "dep:tonic",
    "dep:tonic-health",
    "dep:tfhe-zk-pok",
    "dep:tower",
    "dep:tower-http",
]
slow_tests = ["testing"]
sequential_sns = ["distributed-decryption/sequential_sns"]
wasm_tests = ["testing"]
grpc-client = ["dep:tonic", "dep:tonic-health", "dep:tokio"]
s3_tests = ["testing"]
insecure = []
