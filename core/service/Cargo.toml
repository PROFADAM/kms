[package]
name = "kms"
version = "0.1.0"
edition = "2021"

[lib] # Central KMS
name = "kms_lib"
path = "src/lib.rs"
crate-type = ["lib", "cdylib"]

[[bin]] # Bin to generate keys
name = "kms-gen-keys"
path = "src/bin/kms-gen-keys.rs"
required-features = ["testing"]

[[bin]] # Bin to generate TLS certificates for the service
name = "kms-gen-tls-certs"
path = "src/bin/kms-gen-tls-certs.rs"

[[bin]] # Bin to run the gRPC server
name = "kms-server"
path = "src/bin/kms-server.rs"

[[bin]] # Bin to initialize the threshold KMS cluster after all nodes are up and running.
name = "kms-init"
path = "src/bin/kms-init.rs"

[[bin]] # An example client binary
name = "kms-example-client"
path = "src/bin/kms-example-client.rs"
required-features = ["testing"]

[dependencies]
aes = "0.8.4"
aes-gcm-siv = "0.11.1"
aes-prng = "0.2.1"
alloy-sol-types = "0.7.0"
alloy-primitives = "0.7.0"
anyhow = "1.0.86"
aws-config = { version = "1.1.8", optional = true }
aws-nitro-enclaves-nsm-api = { version = "0.4.0", optional = true }
aws-sdk-kms = { version = "1.18.0", optional = true }
aws-sdk-s3 = { version = "1.18.0", optional = true }
backoff = { version = "0.4.0", features = ["tokio"], optional = true }
bincode = "1.3.3"
clap = { version = "4.5.1", features = ["derive"] }
cbc = { version = "0.1.2", features = ["alloc"] }
cfg-if = "1.0.0"
config = "0.14"
cms = "0.2.3"
crypto_box = { version = "0.9.1", features = ["salsa20"] }
der = "0.7.8"
distributed-decryption = { path = "../threshold/", default-features = false }
hex = "0.4.3"
itertools = "0.13"
k256 = "0.13.3"
lazy_static = "1.4.0"
nom = "7.1.3"
opentelemetry = { version = "0.22", features = ["metrics"], optional = true }
opentelemetry-otlp = { version = "0.15.0", features = ["tokio"], optional = true }
opentelemetry-prometheus = { version = "0.15.0", optional = true }
opentelemetry-semantic-conventions = { version = "0.14.0", optional = true }
opentelemetry-stdout = { version = "0.3.0", features = ["trace"], optional = true }
opentelemetry_sdk = { version = "0.22", features = ["rt-tokio", "logs", "metrics"], optional = true }
prometheus = { version = "=0.13.4", optional = true }
prost = "0.12.3"
rand = { version = "0.8.5", features = ["std", "std_rng"] }
rayon = "1.10"
rcgen = { version = "0.13", optional = true }
reqwest = { version = "0.12.4", features = ["json"], optional = true }
rsa = { version = "0.9.6", features = ["sha2"] }
serde = { version = "1.0.203", features = ["derive", "rc"] }
serde_json = "1.0"
serde_asn1_der = "0.8.0"
serde_bytes = "0.11"
serial_test = "3.0.0"
sha3 = "0.10.8"
signature = "2.2.0"
strum = "0.26"
strum_macros = "0.26"
tonic = { version = "0.11", optional = true }
tokio = { version = "1.37", features = ["macros", "rt-multi-thread"], optional = true }
tfhe = { git = "https://github.com/zama-ai/tfhe-rs.git", rev = "f3b89e83d741cf89a8277a98eb0f2665987ee456", features = ["boolean", "shortint", "integer", "zk-pok-experimental"] } # == tfhe-rs v0.6.3
tracing = { version = "0.1.40", features = ["log"] }
tracing-opentelemetry = { version = "0.23", optional = true }
tracing-subscriber = "0.3.18"
typed-builder = "0.18.1"
url = "2.5.0"
tfhe-zk-pok = { git = "https://github.com/zama-ai/tfhe-rs.git", rev = "f3b89e83d741cf89a8277a98eb0f2665987ee456",  optional = true } # == tfhe-rs v0.6.3

# [target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { version = "0.2.86", features = ["serde-serialize"] }
console_error_panic_hook = { version = "0.1.7" }
serde-wasm-bindgen = { version = "0.6.0" }

[target.'cfg(unix)'.dependencies]
tfhe = { git = "https://github.com/zama-ai/tfhe-rs.git", rev = "f3b89e83d741cf89a8277a98eb0f2665987ee456", features = ["seeder_unix"] } # == tfhe-rs v0.6.3

[dev-dependencies]
ctor = "0.2.8"
assert_cmd = "2.0.14"
sysinfo = "0.30.12"
tempfile = "3.10.1"
tracing-test = "0.2.4"
webpki = { version = "0.22", features = ["std"] }
rustls = { version = "0.23", default-features = false, features = ["std"] }
rstest = "0.21.0"

[build-dependencies]
tonic-build = "0.11"

[features]
default = ["non-wasm","grpc-client"]
testing = []
non-wasm = [
    "distributed-decryption/non-wasm",
    # TODO we need a way to move "distributed-decryption/testing" to dev-dependencies
    "distributed-decryption/testing",
    "dep:aws-config",
    "dep:aws-nitro-enclaves-nsm-api",
    "dep:aws-sdk-kms",
    "dep:aws-sdk-s3",
    "dep:backoff",
    "dep:tokio",
    "dep:reqwest",
    "dep:rcgen",
    "dep:tonic",
    "dep:tfhe-zk-pok",
    "dep:tracing-opentelemetry",
    "dep:opentelemetry",
    "dep:opentelemetry-otlp",
    "dep:opentelemetry-prometheus",
    "dep:opentelemetry-semantic-conventions",
    "dep:opentelemetry-stdout",
    "dep:opentelemetry_sdk",
    "dep:prometheus",
]
slow_tests = ["testing"]
wasm_tests = ["testing"]
grpc-client = [
    "dep:tonic",
    "dep:tokio",
]
