syntax = "proto3";
package kms_service.v1;

import "kms.v1.proto";

service CoreServiceEndpoint {
  // Perform the threshold KMS initialization.
  // This call returns an error on the centralized KMS.
  rpc Init(kms.v1.InitRequest) returns (kms.v1.Empty);

  // Start generating preprocessing materials for key generation asynchronously.
  // This call returns an error on the centralized KMS.
  rpc KeyGenPreproc(kms.v1.KeyGenPreprocRequest) returns (kms.v1.Empty);

  // This call returns an error on the centralized KMS.
  rpc GetKeyGenPreprocResult(kms.v1.RequestId) returns (kms.v1.KeyGenPreprocResult);

  // Generate new keys asynchronously.
  rpc KeyGen(kms.v1.KeyGenRequest) returns (kms.v1.Empty);

  // Return a URI where they can be accessed.
  // The keys at the URI contains signature and authentication information.
  // NOTE: Unprivileged and insecure call
  rpc GetKeyGenResult(kms.v1.RequestId) returns (kms.v1.KeyGenResult);

  // Decrypt a ciphertext and return the signed plaintext.
  rpc Decrypt(kms.v1.DecryptionRequest) returns (kms.v1.Empty);

  // Get the decryption result.
  // This query fails if the result is not available yet.
  rpc GetDecryptResult(kms.v1.RequestId) returns (kms.v1.DecryptionResponse);

  // Reencrypt a ciphertext under a user-specified key and return a signcrypted
  // share of the dercrypted plaintext.
  rpc Reencrypt(kms.v1.ReencryptionRequest) returns (kms.v1.Empty);

  // Get the reencryption result.
  // This query fails if the result is not available yet.
  rpc GetReencryptResult(kms.v1.RequestId) returns (kms.v1.ReencryptionResponse);

  // Start the CRS generation protocol asynchronously.
  rpc CrsGen(kms.v1.CrsGenRequest) returns (kms.v1.Empty);

  // Get a reference to the CRS.
  // This query fails if the result is not available yet.
  rpc GetCrsGenResult(kms.v1.RequestId) returns (kms.v1.CrsGenResult);
}
