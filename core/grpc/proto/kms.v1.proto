syntax = "proto3";
package kms.v1;

// Initialization request for bootstrapping the threshold KMS.
message InitRequest {
    // The 32 Byte / 256 Bit request ID of this request, without `0x` prefix.
    RequestId request_id = 1;
}

// Placeholder response, when no content is needed
message Empty {}

// Simple response to return a 32 Byte / 256 Bit ID, to be used to retrieve the
// computed result later on. This string does NOT contain a `0x` prefix.
message RequestId { string request_id = 1; }

// The type of keyset to generate during in a key generation call.
enum KeySetType {
  // The standard keyset usually consists of the computation key,
  // public key and compression/decompression keys, but it can be
  // configured further using StandardKeySetConfig.
  // This is the default variant.
  Standard = 0;

  // Only a decompression key is generated using this variant,
  // which is used for supporting key rotation.
  DecompressionOnly = 1;
}

// Configuration for the standard key type.
// Required if KeySetType is set to Standard.
message StandardKeySetConfig {
  // Computation key type.
  ComputeKeyType compute_key_type = 1;

  // The compression configuration.
  KeySetCompressionConfig keyset_compression_config = 2;
}

enum ComputeKeyType {
  // Set the compute key type to be CPU.
  // The default must be represented by 0.
  CPU = 0;
}

message KeySetAddedInfo {
  // Must be set if KeySetCompressionConfig::UseExisting is used
  RequestId compression_keyset_id = 1;

  // Must be set if KeySetType::DecompressionOnly is used
  RequestId from_keyset_id_decompression_only = 2;

  // Must be set if KeySetType::DecompressionOnly is used
  RequestId to_keyset_id_decompression_only = 3;
}

// The keyset configuration message.
// It should correspond to KeySetConfig in keyset_config.rs.
message KeySetConfig {
  // Set the keyset type.
  KeySetType keyset_type = 1;

  // Standard keyset config.
  // It must be set if KeySetType::Standard is set.
  StandardKeySetConfig standard_keyset_config = 2;
}

message KeyGenPreprocRequest {
  // The 32 Byte / 256 Bit request ID of this request, without `0x` prefix.
  RequestId request_id = 1;
  // The FHE parameters for key generation.
  FheParameter params = 2;
  // The keyset configuration that controls what kind of key to generate.
  KeySetConfig keyset_config = 3;
}

enum KeySetCompressionConfig {
  // The default must be represented by 0.
  Generate = 0;
  UseExisting = 1;
}

// This message is returned if keygen has completed.
// It is intentionally left empty,
// we may extend it later with a signature on the preproc request ID
// potentially.
message KeyGenPreprocResult {}

// Request for generating new keys under a certain handle and return a URI where
// they can be accessed.
message KeyGenRequest {
  // The 32 Byte / 256 Bit request ID of this request, without `0x` prefix.
  RequestId request_id = 1;

  // The FHE parameters for key generation. This must match
  // what was used in the preprocessing step.
  FheParameter params = 2;

  // The 32 Byte / 256 Bit request ID that generated the preprocessing
  // materials.
  RequestId preproc_id = 3;

  // The EIP712 domain used for signing the response.
  Eip712DomainMsg domain = 4;

  // The keyset configuration that controls what kind of key to generate.
  // It must match the keyset_config field in the preprocessing call with ID
  // preproc_id.
  KeySetConfig keyset_config = 5;

  // For certain keyset_config, additional information is needed,
  // this is given by the documentation of KeySetAddedInfo.
  KeySetAddedInfo keyset_added_info = 6;
}

message KeyGenResult {
  // The 32 Byte / 256 Bit ID of the key generation request, without `0x`
  // prefix.
  RequestId request_id = 1;
  // The results of the key generation, a map from key type (e.g. Public,
  // Server, Sns key) to the signed key data.
  map<string, SignedPubDataHandle> key_results = 2;
}

// The result of generation of a public key
message SignedPubDataHandle {
  // The key handle;
  // This is a `SHA3-256` hash of the `tfhe::safe_serialization` of the
  // underlying struct. This handle serves as the `URI` to locate the actual
  // object in the `storage`.
  string key_handle = 1;
  // Plain ECDSA Signature on the key handle.
  bytes signature = 2;
  // The signature on the key for the external recipient
  // (e.g. using EIP712 for HTTPZ)
  bytes external_signature = 3;
}

// Keeping the fields in lowercase is important because
// it needs to match what the config reads out of the toml config files,
// e.g., in default_centralized.toml.
enum FheParameter {
  // The default must be represented by 0. This is the default large and secure
  // parameter set.
  default = 0;
  // This is a smaller but insecure parameter set, used for testing.
  test = 1;
}

message CrsGenRequest {
  // The 32 Byte / 256 Bit ID of the crs generation request, without `0x`
  // prefix.
  RequestId request_id = 1;
  FheParameter params = 2;
  // This is the maximum number of bits that can be proven,
  // e.g. 64 for a single FheUint64 or 8 x FheUint8 values.
  // If this is not provided, then it defaults to ZK_DEFAULT_MAX_NUM_CLEARTEXT.
  optional uint32 max_num_bits = 3;
  Eip712DomainMsg domain = 4;
}

message CrsGenResult {
  // The 32 Byte / 256 Bit ID of the crs generation request, without `0x`
  // prefix.
  RequestId request_id = 1;
  // The struct holding the signature and the handle of the CRS
  SignedPubDataHandle crs_results = 2;
}

// This enum tells the KMS how to deserialize ciphertexts.
enum CiphertextFormat {
  // Small (64-bit) compressed ciphertexts, this needs to be
  // decompressed first before we can run distributed decryption.
  SmallCompressed = 0;
  // Small (64-bit) expanded ciphertexts,
  // we can directly decrypt this ciphertext.
  SmallExpanded = 1;
  // Big (128-bit) compressed ciphertexts.
  // WARNING! currently not supported.
  BigCompressed = 2;
  // Big (128-bit) expanded ciphertexts.
  // This is only useful when doing the second half of
  // of the noise-flooding decryption method,
  // it allows us to bypass the big PBS.
  BigExpanded = 3;
}

message TypedCiphertext {
  // The actual ciphertext to decrypt, taken directly from HTTPZ.
  bytes ciphertext = 1;
  // The type of plaintext encrypted. The type should match FheType from tfhe-rs:
  // https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs
  int32 fhe_type = 2;
  // The external handle of the ciphertext (the handle used in the copro).
  bytes external_handle = 3;
  // The ciphertext format, see CiphertextFormat documentation for details.
  // CiphertextFormat::default() is used if unspecified.
  CiphertextFormat ciphertext_format = 4;
}

message DecryptionRequest {
  // The 32 Byte / 256 Bit ID of the public decryption request, without `0x`
  // prefix.
  RequestId request_id = 1;
  // The one or many ciphertexts and corresponding types to decrypt
  repeated TypedCiphertext ciphertexts = 2;
  // The 32 Byte / 256 Bit key id to use for decryption. This is the request_id
  // used for key generation
  RequestId key_id = 3;
  Eip712DomainMsg domain = 4;
}

// The typed plaintext type, which is the result of decryption.
message TypedPlaintext {
  // The actual plaintext in bytes.
  bytes bytes = 1;
  // The type of plaintext encrypted. The type should match FheType from tfhe-rs:
  // https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs
  int32 fhe_type = 2;
}

// KMS-internal Decryption Response Payload, containing meta data, plaintexts
// and external results
message DecryptionResponsePayload {
  // The server's signature verification key.
  // Encoded using SEC1.
  // Needed to validate the response, but MUST also be linked to a list of
  // trusted keys.
  // TODO should be renamed to make it clear it is the server's key
  bytes verification_key = 1;
  // Digest of the request validated.
  // Needed to ensure that the response is for the expected request.
  bytes digest = 2;
  // A list of plaintexts, as little endian byte arrays. One for each
  // ciphertext.
  repeated TypedPlaintext plaintexts = 3;
  // the signature on external_decryption_result for the external recipient
  // (e.g. using EIP712 for HTTPZ)
  optional bytes external_signature = 4;
}

// KMS-internal Decryption Response
message DecryptionResponse {
  // Signature of the serialization of [DecryptionResponsePayload].
  bytes signature = 1;
  // The payload that is signed
  DecryptionResponsePayload payload = 2;
}

// https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator
// eventually chain_id, verifying_contract and salt will be parsed in to
// solidity types
message Eip712DomainMsg {
  string name = 1;
  string version = 2;
  bytes chain_id = 3;
  string verifying_contract = 4;
  optional bytes salt = 5;
}

message ReencryptionRequest {
  // The 32 Byte / 256 Bit ID of the user decryption request, without `0x`
  // prefix. Future queries for the result must use this request ID.
  RequestId request_id = 1;

  // The list of ciphertexts to reencrypt.
  repeated TypedCiphertext typed_ciphertexts = 2;

  // The 32 Byte / 256 Bit key id to use for decryption. This is the request_id
  // used for key generation
  RequestId key_id = 3;

  // The client's (blockchain wallet) address,
  // encoded using EIP-55.
  string client_address = 4;

  // Encoding of the user's public encryption key for this request.
  // Encoding using the default encoding of libsodium, i.e. the 32 bytes of a
  // Montgomery point.
  bytes enc_key = 5;

  Eip712DomainMsg domain = 6;
}

message ReencryptionResponse {
  bytes signature = 1;
  // This is the external signature created from the Eip712 domain
  // on the structure, where reencryptedShare is bincode::serialize(&payload)
  // struct UserDecryptResponseVerification {
  //     bytes publicKey;
  //     uint256[] ctHandles;
  //     bytes reencryptedShare;
  // }
  bytes external_signature = 2;
  // The actual [ReencryptionResponsePayload].
  ReencryptionResponsePayload payload = 3;
}

message ReencryptionResponsePayload {
  // The server's signature verification key, Encoded using SEC1.
  // Needed to validate the response, but MUST also be linked to a list of
  // trusted keys.
  bytes verification_key = 1;
  // This is needed to ensure the response corresponds to the request.
  // It is the digest of UserDecryptionLinker hashed using EIP712
  // under the given domain in the request.
  bytes digest = 2;
  // The resulting signcrypted ciphertexts, each ciphertext
  // must be decrypted and then reconstructed with the other shares
  // to produce the final plaintext.
  repeated TypedSigncryptedCiphertext signcrypted_ciphertexts = 3;
  // The ID of the MPC party doing the reencryption. Used for polynomial
  // reconstruction.
  uint32 party_id = 4;
  // The degree of the sharing scheme used.
  uint32 degree = 5;
}

message TypedSigncryptedCiphertext {
  // The type of plaintext encrypted. The type should match FheType from tfhe-rs:
  // https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs
  int32 fhe_type = 1;
  // The signcrypted payload, using a hybrid encryption approach in
  // sign-then-encrypt.
  bytes signcrypted_ciphertext = 2;
  // The external handles that were originally in the request.
  bytes external_handle = 3;
  // The packing factor determines whether the decrypted plaintext
  // has a different way of packing compared to what is specified in the plaintext modulus.
  uint32 packing_factor = 4;
}
