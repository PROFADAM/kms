syntax = "proto3";
package kms.v1;

// Import any required protos
import "google/protobuf/empty.proto";

// The plaintext types that can be encrypted in a fhevm ciphertext.
enum FheType {
  EBOOL = 0;
  EUINT4 = 1;
  EUINT8 = 2;
  EUINT16 = 3;
  EUINT32 = 4;
  EUINT64 = 5;
  EUINT128 = 6;
  EUINT160 = 7;
  EUINT256 = 8;
  EUINT512 = 9;
  EUINT1024 = 10;
  EUINT2048 = 11;
}

// Simple response to return an ID, to be used to retrieve the computed result
message RequestId { 
  string request_id = 1; 
}

// TypedPlaintext represents a plaintext value with its FHE type
message TypedPlaintext {
  bytes bytes = 1;
  FheType fhe_type = 2;
}

// TypedCiphertext represents an encrypted value with its FHE type
message TypedCiphertext {
  bytes bytes = 1;
  FheType fhe_type = 2;
}

// EIP712 domain message for signing
message Eip712DomainMsg {
  string name = 1;
  string version = 2;
  bytes chain_id = 3;
  string verifying_contract = 4;
  optional bytes salt = 5;
}

// Decryption Request and Response Messages

message DecryptionRequest {
  RequestId request_id = 1;
  optional Eip712DomainMsg domain = 2;
  DecryptionRequestPayload payload = 3;
}

message DecryptionRequestPayload {
  repeated bytes ciphertext_handles = 1; 
  string acl_address = 2;
}

message DecryptionResponse {
  RequestId request_id = 1;
  DecryptionResponsePayload payload = 2;
}

message DecryptionResponsePayload {
  bytes decrypted_result = 1;
  bytes verification_key = 2;
  bytes digest = 3;
  repeated bytes signatures = 4;
}

// External Decryption Result
message ExternalDecryptionResult {
  string acl_address = 1;
  repeated bytes handles_list = 2; 
  bytes decrypted_result = 3;
}

// Reencryption Request and Response Messages

message ReencryptionRequest {
  RequestId request_id = 1;
  optional Eip712DomainMsg domain = 2;
  ReencryptionRequestPayload payload = 3;
}

message ReencryptionRequestPayload {
  bytes enc_key = 1;
  optional TypedCiphertext ciphertext = 2;
  bytes ciphertext_digest = 3;
}

message ReencryptionResponse {
  RequestId request_id = 1;
  ReencryptionResponsePayload payload = 2;
}

message ReencryptionResponsePayload {
  TypedCiphertext ciphertext = 1;
  bytes verification_key = 2;
  bytes digest = 3;
  repeated bytes signatures = 4;
  FheType fhe_type = 5;
}

// Service definition
service KmsService {
  // Decryption operations
  rpc RequestDecryption(DecryptionRequest) returns (DecryptionResponse);
  
  // Reencryption operations  
  rpc RequestReencryption(ReencryptionRequest) returns (ReencryptionResponse);
}
